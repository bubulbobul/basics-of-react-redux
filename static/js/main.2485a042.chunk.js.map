{"version":3,"sources":["components/Posts.js","actions/postsAction.js","actions/types.js","components/PostForm.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","react_default","a","createElement","key","id","title","body","Component","connect","state","items","item","dispatch","console","log","fetch","then","res","json","type","payload","PostForm","onChange","e","_this","setState","Object","defineProperty","target","name","value","onSubmit","preventDefault","createPost","postData","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","className","components_PostForm","components_Posts","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2485a042.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { connect } from \"react-redux\";\nimport { fetchPosts } from \"../actions/postsAction\";\n\nclass Posts extends Component {\n  componentWillMount() {\n    this.props.fetchPosts();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.newPost) {\n      this.props.posts.unshift(nextProps.newPost);\n    }\n  }\n\n  render() {\n    const postItems = this.props.posts.map(post => {\n      return (\n        <div key={post.id}>\n          <h3>{post.title}</h3>\n          <p>{post.body}</p>\n        </div>\n      );\n    });\n    return (\n      <div>\n        <h1>Posts</h1>\n        {postItems}\n      </div>\n    );\n  }\n}\n\nPosts.propTypes = {\n  fetchPosts: PropTypes.func.isRequired,\n  posts: PropTypes.array.isRequired,\n  newPost: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  posts: state.posts.items,\n  newPost: state.posts.item\n});\n\nexport default connect(\n  mapStateToProps,\n  { fetchPosts }\n)(Posts);\n","import { FETCH_POSTS, NEW_POST } from \"./types\";\n\nexport const fetchPosts = () => dispatch => {\n  console.log(\"fetching, from action\");\n  fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    .then(res => res.json())\n    .then(posts =>\n      dispatch({\n        type: FETCH_POSTS,\n        payload: posts\n      })\n    );\n};\n\nexport const createPost = postData => dispatch => {\n  // console.log(\"createpost\");\n  fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(postData)\n  })\n    .then(res => res.json())\n    .then(post =>\n      dispatch({\n        type: NEW_POST,\n        payload: post\n      })\n    );\n};\n","export const FETCH_POSTS = \"FETCH_POSTS\";\nexport const NEW_POST = \"NEW_POST\";\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { connect } from \"react-redux\";\nimport { createPost } from \"../actions/postsAction\";\nclass PostForm extends Component {\n  state = {\n    title: \"\",\n    body: \"\"\n  };\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    const post = {\n      title: this.state.title,\n      body: this.state.body\n    };\n\n    // call action\n    this.props.createPost(post);\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Add Post</h1>\n        <form onSubmit={this.onSubmit}>\n          <div>\n            <label>Title: </label>\n            <br />\n            <input\n              type='text'\n              name='title'\n              value={this.state.title}\n              onChange={this.onChange}\n            />\n          </div>\n          <div>\n            <label>Body: </label>\n            <br />\n            <textarea\n              name='body'\n              value={this.state.body}\n              onChange={this.onChange}\n            />\n          </div>\n          <br />\n          <button type='submit'>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nPostForm.propTypes = {\n  createPost: PropTypes.func.isRequired\n};\n\nexport default connect(\n  null,\n  { createPost }\n)(PostForm);\n","import { FETCH_POSTS, NEW_POST } from \"../actions/types\";\n\nconst initialState = {\n  items: [],\n\n  item: {}\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_POSTS:\n      console.log(\"reducer set\");\n      return {\n        ...state,\n        items: action.payload\n      };\n    case NEW_POST:\n      return {\n        ...state,\n        item: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport postReducer from \"./postReducer\";\n\nexport default combineReducers({\n  posts: postReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\n\nimport Posts from \"./components/Posts\";\nimport PostForm from \"./components/PostForm\";\n\nimport store from \"./store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <PostForm />\n        <hr />\n        <Posts />\n        <hr />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}